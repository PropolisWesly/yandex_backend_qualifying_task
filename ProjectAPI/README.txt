!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    Если мне не удастся включить автоматический запуск, то сначала нужно инициализировать postgres в Docker
с паролем "password" (и юзером 'postgres'). Я далеко не мастер Docker'а, но верю, что это можно сделать
в терминале следующей командой:

        docker run --name postgres_machine -p 5432:5432 -e POSTGRES_PASSWORD=password -d postgres:13.3

Потом нужно запустить app.py. После этого приложение должно заработать

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    Данное приложение позволяет хранить данные о товарах и категориях на сервере, получать к ним доступ, удалять
и получать статистику их изменений. Получить доступ к данному функционалу пользователь может с помощью URL запросов
по адресу 0.0.0.0:80

    Код приложения написан на Python 3.9.7. Для управления базой данных и хранения информации используется
PostgreSQL 13.3, развёрнутый в Docker контейнере. Для взаимодействия с БД применяется библиотека SQLalchemy.
Также для валидации данных в POST запросе использовались схемы из библиотки marshmallow.Другие библиотеки и их версии
описаны в файле requirements.txt

    База данных состоит из двух таблиц: current_table и history_table. В первой хранится актуальная информация
об элементах, во второй - история изменений неудалённых товаров и категорий. Первая имеет главный ключ
id элемента, вторая - случайный сгенерированный uuid. Поля в таблице одни и те же, но в history добавлено поле
generated_id. Поле quantity отражает количество товаров в категории, а price - сумарную цену. Остальные поля
соответствуют вводу.

    Для запуска приложения и обработки POST, GET и DELETE запросов использовался aiohttp. К сожалению, полный потенциал
библиотеки не удалось реализовать из-за проблемы с асинхронным контекстным менеджером во время трензакции. Поэтому
приложение обрабатывет запросы последовательно, но при должном решении данной проблемы (и применениями await
при обращении к БД) это исправляется без особых изменений кода.

    Для тестирования использовался предоставленный модуль и ручная проверка на стадии написания кода
