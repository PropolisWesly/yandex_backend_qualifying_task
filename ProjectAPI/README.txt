!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    Если мне не удастся включить автоматический запуск, то сначала нужно инициализировать контейнер Docker с образом
postgres. Вообще, я его смог настроить так, чтобы SQL перегружался автоматически, но если что-то пошло не так, то нужно
выполнить следующую команду:

sudo docker run --restart=always --name postgres_machine -p 5432:5432 -e POSTGRES_PASSWORD=password -d postgres:13.3

    Пароль и порт нужно оставить именно такими, как и опцию --restart=always, иначе приложение не сможет получить
доступ к БД. а персистентность данных не будет соблюдена при перезагрузке виртуальной машины.
                                    
    Если хотите создать контейнер заново (например, для уничтожения накопенных данных в базе), то старый нужно удалить. 
Делается это несколькими командами командами. Сначала останавливаем контейнер, если он включен:

                                      sudo docker stop postgres_machine
                                    
Затем непосредственное удаляем:

                                       sudo docker rm postgres_machine
                                       
И после этого выполняем первую команду с созданием контейнера.

После инициализации Докер контейнера нужно запустить app.py через python3. После этого приложение должно заработать.

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    Данное приложение позволяет хранить данные о товарах и категориях на сервере, получать к ним доступ, удалять
и получать статистику их изменений. Получить доступ к данному функционалу пользователь может с помощью URL запросов
по адресу 0.0.0.0:80. Подробнее о возможных запросах можно найти в openapi.yaml.

    Код приложения написан на Python 3.9.7. Для управления базой данных и хранения информации используется
PostgreSQL 13.3, развёрнутый в Docker контейнере. Персистентность данных полностью лежит на Докере, поэтому после
завершения работы приложения информация будет доступна в соответствующем контейнере Докера.Для взаимодействия с БД
применяется библиотека SQLalchemy.Также для валидации данных в POST запросе использовались схемы из библиотеки
marshmallow. Другие библиотеки и их версии описаны в файле requirements.txt

    База данных состоит из двух таблиц: current_table и history_table. В первой хранится актуальная информация
об элементах, во второй - история изменений неудалённых товаров и категорий. Первая имеет главный ключ
id элемента, вторая - случайный сгенерированный uuid. Поля в таблице одни и те же, но в history добавлено поле
generated_id. Поле quantity отражает количество товаров в категории, а price - сумарную цену. Остальные поля
соответствуют вводу.

    Для запуска приложения и обработки POST, GET и DELETE запросов использовался aiohttp. К сожалению, полный потенциал
библиотеки не удалось реализовать из-за проблемы с асинхронным контекстным менеджером во время трензакции. Поэтому
приложение обрабатывет запросы последовательно, но при должном решении данной проблемы (и применениями await
при обращении к БД) это исправляется без особых изменений кода.

    Для тестирования использовался предоставленный модуль и ручная проверка на стадии написания кода
